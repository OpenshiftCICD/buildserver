apiVersion: v1
kind: Template
labels:
  template: nexus3-template
metadata:
  name: nexus3
  annotations:
    description: Sonatype Nexus 3 persistent template
    tags: ci,nexus

parameters:
  - name: SERVICE_NAME
    displayName: Sonatype Nexus service name
    required: true
    value: nexus

  - name: NEXUS_VERSION
    displayName: Sonatype Nexus version
    required: true
    value: 3.6.0

  - name: "MIN_CPU"
    displayName: "Min CPU"
    description: "Min cpu allocated to the Nexus pod"
    required: true
    value: "500m"

  - name: "MAX_CPU"
    displayName: "Max CPU"
    description: "Max cpu allocated to the Nexus pod"
    required: true
    value: "1000m"

  - name: "MIN_MEMORY"
    displayName: "Min Memory"
    description: "Min memory allocated to the Nexus pod"
    required: true
    value: "1Gi"

  - name: "MAX_MEMORY"
    displayName: "Max Memory"
    description: " Max memory allocated to the Nexus pod"
    required: true
    value: "4Gi"

  - name: "MAX_VOLUME_SIZE"
    displayName: "Max volume size"
    description: "Max volume size to the pod"
    required: true
    value: "10Gi"

objects:
  - kind: "PersistentVolumeClaim"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${SERVICE_NAME}"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "${MAX_VOLUME_SIZE}"

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      tags:
      - name: ${NEXUS_VERSION}
        from:
          kind: DockerImage
          name: docker.io/sonatype/nexus3:${NEXUS_VERSION}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      replicas: "1"
      selector:
        deploymentconfig: ${SERVICE_NAME}
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 0
          timeoutSeconds: 360
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            deploymentconfig: ${SERVICE_NAME}
        spec:
          containers:
            - name: ${SERVICE_NAME}
              env:
                - name: "CONTEXT_PATH"
                  value: /
                - name: "MIN_HEAP"
                  value: "${MIN_MEMORY}"
                - name: "MAX_HEAP"
                  value: "${MAX_MEMORY}"
              image: ""
              imagePullPolicy: IfNotPresent
              livenessProbe:
                exec:
                  command:
                  - echo
                  - ok
                successThreshold: 1
                failureThreshold: 10
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /
                  port: 8081
                  scheme: HTTP
                successThreshold: 1
                failureThreshold: 10
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 5
              ports:
                - containerPort: 8081
                  protocol: TCP
                - containerPort: 8082
                  protocol: TCP
              resources:
                requests:
                  memory: "${MIN_MEMORY}"
                  cpu: "${MIN_CPU}"
                limits:
                  memory: "${MAX_MEMORY}"
                  cpu: "${MAX_CPU}"
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - name: "${SERVICE_NAME}"
                  mountPath: /nexus-data
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              securityContext: {}
              terminationGracePeriodSeconds: 30
          volumes:
            - name: "${SERVICE_NAME}"
              persistentVolumeClaim:
                claimName: "${SERVICE_NAME}"
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${SERVICE_NAME}
            from:
              kind: ImageStreamTag
              name: ${SERVICE_NAME}:${NEXUS_VERSION}
          type: ImageChange

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      ports:
      - name: 8081-tcp
        port: 8081
        protocol: TCP
        targetPort: 8081
      selector:
        deploymentconfig: ${SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}-docker-registry
    spec:
      ports:
      - name: 8082-tcp
        port: 8082
        protocol: TCP
        targetPort: 8082
      selector:
        deploymentconfig: ${SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      port:
        targetPort: 8081-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${SERVICE_NAME}

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}-docker-registry
    spec:
      port:
        targetPort: 8082-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${SERVICE_NAME}-docker-registry
